= all twiliofaces inject annotations

Twilio makes HTTP requests to your application just like a regular web browser. By including parameters and values in its requests, Twilio sends data to your application that you can act upon before responding. 
You can configure the URLs and HTTP Methods Twilio uses to make its requests via the account portal or using 
the REST API.
You can inject, in your CDI bean, a twilio request param  using the corresponding annotation:

----

@Named
@RequestScoped
public SimpleRequestController {

   @Inject
   @CallSid
   private String callSid;
   
   
----

If you inject some parameter in a session scoped component, you should use Instance<String> to read the valued, 
otherwise you will read always the value injected at creation of controller. With Instance<String> you will 
read the contextual value.

----
   
@Named
@SessionScoped
public SimpleSessionController implements Serializable{
   
   
   @Inject
   @From
   private Instance<String> from;
  

....

}

----

For more information about single param, read:
http://www.twilio.com/docs/api/twiml/twilio_request


== configuration annotations (org.twiliofaces.inject.configuration)

. TwilioAccount
. TwilioAccountSid
. TwilioAuthToken
. TwilioCapabilityToken
. TwilioConnectAppSid
. TwilioNumber


== notification annotations (org.twiliofaces.inject.notification)
		
. AccountSid
. ApiVersion
. Caller
. CallerName
. CallSid
. CallStatus
. Digits
. Direction
. ForwardedFrom
. From
. FromCity
. FromCountry
. FromState
. FromZip
. PhoneNumber
. RecordingDuration
. RecordingSid
. RecordingUrl
. SmsStatus
. To
. ToCity
. ToCountry
. ToState
. ToZip
. TranscriptionSid
. TranscriptionStatus
. TranscriptionText
. TranscriptionUrl
. TwilioRequestParams (all request params annotation)
. TwilioSignature

== twilio scope annotation (org.twiliofaces.inject.context)

. TwilioScope

== sip annotations (org.twiliofaces.inject.notification.sip)

. DialSipCallId
. DialSipHeader_
. DialSipHeader
. DialSipResponseCode
. SipCallId
. SipHeader

